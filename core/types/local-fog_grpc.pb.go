// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: local-fog.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LocalFogClient is the client API for LocalFog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalFogClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncReply, error)
	Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallReply, error)
	GetProgram(ctx context.Context, in *GetProgramRequest, opts ...grpc.CallOption) (*GetProgramReply, error)
}

type localFogClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalFogClient(cc grpc.ClientConnInterface) LocalFogClient {
	return &localFogClient{cc}
}

func (c *localFogClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/tutorial.LocalFog/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localFogClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncReply, error) {
	out := new(SyncReply)
	err := c.cc.Invoke(ctx, "/tutorial.LocalFog/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localFogClient) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallReply, error) {
	out := new(CallReply)
	err := c.cc.Invoke(ctx, "/tutorial.LocalFog/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localFogClient) GetProgram(ctx context.Context, in *GetProgramRequest, opts ...grpc.CallOption) (*GetProgramReply, error) {
	out := new(GetProgramReply)
	err := c.cc.Invoke(ctx, "/tutorial.LocalFog/GetProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalFogServer is the server API for LocalFog service.
// All implementations must embed UnimplementedLocalFogServer
// for forward compatibility
type LocalFogServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	Sync(context.Context, *SyncRequest) (*SyncReply, error)
	Call(context.Context, *CallRequest) (*CallReply, error)
	GetProgram(context.Context, *GetProgramRequest) (*GetProgramReply, error)
	mustEmbedUnimplementedLocalFogServer()
}

// UnimplementedLocalFogServer must be embedded to have forward compatible implementations.
type UnimplementedLocalFogServer struct {
}

func (UnimplementedLocalFogServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedLocalFogServer) Sync(context.Context, *SyncRequest) (*SyncReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedLocalFogServer) Call(context.Context, *CallRequest) (*CallReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedLocalFogServer) GetProgram(context.Context, *GetProgramRequest) (*GetProgramReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgram not implemented")
}
func (UnimplementedLocalFogServer) mustEmbedUnimplementedLocalFogServer() {}

// UnsafeLocalFogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalFogServer will
// result in compilation errors.
type UnsafeLocalFogServer interface {
	mustEmbedUnimplementedLocalFogServer()
}

func RegisterLocalFogServer(s grpc.ServiceRegistrar, srv LocalFogServer) {
	s.RegisterService(&LocalFog_ServiceDesc, srv)
}

func _LocalFog_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalFogServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tutorial.LocalFog/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalFogServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalFog_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalFogServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tutorial.LocalFog/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalFogServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalFog_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalFogServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tutorial.LocalFog/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalFogServer).Call(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalFog_GetProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalFogServer).GetProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tutorial.LocalFog/GetProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalFogServer).GetProgram(ctx, req.(*GetProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocalFog_ServiceDesc is the grpc.ServiceDesc for LocalFog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalFog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tutorial.LocalFog",
	HandlerType: (*LocalFogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _LocalFog_Ping_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _LocalFog_Sync_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _LocalFog_Call_Handler,
		},
		{
			MethodName: "GetProgram",
			Handler:    _LocalFog_GetProgram_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "local-fog.proto",
}
